/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as dashboardDashboardImport } from './routes/(dashboard)/_dashboard'
import { Route as dashboardDashboardIndexImport } from './routes/(dashboard)/_dashboard/index'
import { Route as dashboardDashboardSettingsIndexImport } from './routes/(dashboard)/_dashboard/settings/index'
import { Route as dashboardDashboardRequestIndexImport } from './routes/(dashboard)/_dashboard/request/index'
import { Route as dashboardDashboardMyAccountIndexImport } from './routes/(dashboard)/_dashboard/my-account/index'
import { Route as dashboardDashboardRequestNewCycleIndexImport } from './routes/(dashboard)/_dashboard/request/new-cycle/index'

// Create Virtual Routes

const dashboardImport = createFileRoute('/(dashboard)')()

// Create/Update Routes

const dashboardRoute = dashboardImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const dashboardDashboardRoute = dashboardDashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => dashboardRoute,
} as any)

const dashboardDashboardIndexRoute = dashboardDashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardDashboardRoute,
} as any)

const dashboardDashboardSettingsIndexRoute =
  dashboardDashboardSettingsIndexImport.update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

const dashboardDashboardRequestIndexRoute =
  dashboardDashboardRequestIndexImport.update({
    id: '/request/',
    path: '/request/',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

const dashboardDashboardMyAccountIndexRoute =
  dashboardDashboardMyAccountIndexImport.update({
    id: '/my-account/',
    path: '/my-account/',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

const dashboardDashboardRequestNewCycleIndexRoute =
  dashboardDashboardRequestNewCycleIndexImport.update({
    id: '/request/new-cycle/',
    path: '/request/new-cycle/',
    getParentRoute: () => dashboardDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/_dashboard': {
      id: '/(dashboard)/_dashboard'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardDashboardImport
      parentRoute: typeof dashboardRoute
    }
    '/(dashboard)/_dashboard/': {
      id: '/(dashboard)/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardDashboardIndexImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/(dashboard)/_dashboard/my-account/': {
      id: '/(dashboard)/_dashboard/my-account/'
      path: '/my-account'
      fullPath: '/my-account'
      preLoaderRoute: typeof dashboardDashboardMyAccountIndexImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/(dashboard)/_dashboard/request/': {
      id: '/(dashboard)/_dashboard/request/'
      path: '/request'
      fullPath: '/request'
      preLoaderRoute: typeof dashboardDashboardRequestIndexImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/(dashboard)/_dashboard/settings/': {
      id: '/(dashboard)/_dashboard/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof dashboardDashboardSettingsIndexImport
      parentRoute: typeof dashboardDashboardImport
    }
    '/(dashboard)/_dashboard/request/new-cycle/': {
      id: '/(dashboard)/_dashboard/request/new-cycle/'
      path: '/request/new-cycle'
      fullPath: '/request/new-cycle'
      preLoaderRoute: typeof dashboardDashboardRequestNewCycleIndexImport
      parentRoute: typeof dashboardDashboardImport
    }
  }
}

// Create and export the route tree

interface dashboardDashboardRouteChildren {
  dashboardDashboardIndexRoute: typeof dashboardDashboardIndexRoute
  dashboardDashboardMyAccountIndexRoute: typeof dashboardDashboardMyAccountIndexRoute
  dashboardDashboardRequestIndexRoute: typeof dashboardDashboardRequestIndexRoute
  dashboardDashboardSettingsIndexRoute: typeof dashboardDashboardSettingsIndexRoute
  dashboardDashboardRequestNewCycleIndexRoute: typeof dashboardDashboardRequestNewCycleIndexRoute
}

const dashboardDashboardRouteChildren: dashboardDashboardRouteChildren = {
  dashboardDashboardIndexRoute: dashboardDashboardIndexRoute,
  dashboardDashboardMyAccountIndexRoute: dashboardDashboardMyAccountIndexRoute,
  dashboardDashboardRequestIndexRoute: dashboardDashboardRequestIndexRoute,
  dashboardDashboardSettingsIndexRoute: dashboardDashboardSettingsIndexRoute,
  dashboardDashboardRequestNewCycleIndexRoute:
    dashboardDashboardRequestNewCycleIndexRoute,
}

const dashboardDashboardRouteWithChildren =
  dashboardDashboardRoute._addFileChildren(dashboardDashboardRouteChildren)

interface dashboardRouteChildren {
  dashboardDashboardRoute: typeof dashboardDashboardRouteWithChildren
}

const dashboardRouteChildren: dashboardRouteChildren = {
  dashboardDashboardRoute: dashboardDashboardRouteWithChildren,
}

const dashboardRouteWithChildren = dashboardRoute._addFileChildren(
  dashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/': typeof dashboardDashboardIndexRoute
  '/my-account': typeof dashboardDashboardMyAccountIndexRoute
  '/request': typeof dashboardDashboardRequestIndexRoute
  '/settings': typeof dashboardDashboardSettingsIndexRoute
  '/request/new-cycle': typeof dashboardDashboardRequestNewCycleIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof dashboardDashboardIndexRoute
  '/my-account': typeof dashboardDashboardMyAccountIndexRoute
  '/request': typeof dashboardDashboardRequestIndexRoute
  '/settings': typeof dashboardDashboardSettingsIndexRoute
  '/request/new-cycle': typeof dashboardDashboardRequestNewCycleIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRoute
  '/(dashboard)': typeof dashboardRouteWithChildren
  '/(dashboard)/_dashboard': typeof dashboardDashboardRouteWithChildren
  '/(dashboard)/_dashboard/': typeof dashboardDashboardIndexRoute
  '/(dashboard)/_dashboard/my-account/': typeof dashboardDashboardMyAccountIndexRoute
  '/(dashboard)/_dashboard/request/': typeof dashboardDashboardRequestIndexRoute
  '/(dashboard)/_dashboard/settings/': typeof dashboardDashboardSettingsIndexRoute
  '/(dashboard)/_dashboard/request/new-cycle/': typeof dashboardDashboardRequestNewCycleIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/'
    | '/my-account'
    | '/request'
    | '/settings'
    | '/request/new-cycle'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/'
    | '/my-account'
    | '/request'
    | '/settings'
    | '/request/new-cycle'
  id:
    | '__root__'
    | '/login'
    | '/(dashboard)'
    | '/(dashboard)/_dashboard'
    | '/(dashboard)/_dashboard/'
    | '/(dashboard)/_dashboard/my-account/'
    | '/(dashboard)/_dashboard/request/'
    | '/(dashboard)/_dashboard/settings/'
    | '/(dashboard)/_dashboard/request/new-cycle/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  dashboardRoute: typeof dashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  dashboardRoute: dashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/(dashboard)"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(dashboard)": {
      "filePath": "(dashboard)",
      "children": [
        "/(dashboard)/_dashboard"
      ]
    },
    "/(dashboard)/_dashboard": {
      "filePath": "(dashboard)/_dashboard.tsx",
      "parent": "/(dashboard)",
      "children": [
        "/(dashboard)/_dashboard/",
        "/(dashboard)/_dashboard/my-account/",
        "/(dashboard)/_dashboard/request/",
        "/(dashboard)/_dashboard/settings/",
        "/(dashboard)/_dashboard/request/new-cycle/"
      ]
    },
    "/(dashboard)/_dashboard/": {
      "filePath": "(dashboard)/_dashboard/index.tsx",
      "parent": "/(dashboard)/_dashboard"
    },
    "/(dashboard)/_dashboard/my-account/": {
      "filePath": "(dashboard)/_dashboard/my-account/index.tsx",
      "parent": "/(dashboard)/_dashboard"
    },
    "/(dashboard)/_dashboard/request/": {
      "filePath": "(dashboard)/_dashboard/request/index.tsx",
      "parent": "/(dashboard)/_dashboard"
    },
    "/(dashboard)/_dashboard/settings/": {
      "filePath": "(dashboard)/_dashboard/settings/index.tsx",
      "parent": "/(dashboard)/_dashboard"
    },
    "/(dashboard)/_dashboard/request/new-cycle/": {
      "filePath": "(dashboard)/_dashboard/request/new-cycle/index.tsx",
      "parent": "/(dashboard)/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
